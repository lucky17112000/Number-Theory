#include <bits/stdc++.h>
#define endl '\n'
#define strim stringstream
#define ll long long int
#define inf INT_MAX
#define negInf INT_MIN
#define mod %
#define find_array_max *max_element(arr.begin(), arr.end());
#define find_array_min *min_element(arr.begin(), arr.end());
#define pii pair<int, int>
#define pll pair<ll, ll>
#define psii pair<string, pair<int, int>>
#define left_range(i, x, y) for (int i = x; i <= y; i++)
#define right_range(i, x, y) for (int i = y; i >= x; i--)
void hey_output()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}
using namespace std;
const int N = 1e5 + 7;
vector<bool> my_prime(N, true);
vector<int> lowest_prime(N, 0);
vector<int> higest_prime(N, 0);
// *****important*****
// all even number lowest prime number alawyes will be 2(2 is lowest prime number in decimal number system)

void sieve()
{
    my_prime[0] = my_prime[1] = false;

    for (int i = 2; i < N; ++i)
    {
        if (my_prime[i] == true)
        {
            lowest_prime[i] = higest_prime[i] = i;
            for (int j = 2 * i; j < N; j += i)
            {
                my_prime[j] = false;
                higest_prime[j] = i;
                if (lowest_prime[j] == 0)
                {
                    lowest_prime[j] = i;
                }
            }
        }
    }
}
static void go_on()
{
    // int n;
    // cin >> n;
    // left_range(i, 2, n)
    // {
    // cout << i << ": "
    //  << " " << lowest_prime[i] << " " << higest_prime[i];
    // cout << endl;
    // }
    // prime factorization with sieve(O(logn))
    int n;
    cin >> n;
    vector<int> prime_factor(N, 0);
    while (n > 1)
    {
        int adm = higest_prime[n];
        while (n mod adm == 0)
        {
            n /= adm;
            prime_factor.push_back(adm);
        }
    }
    for (auto u : prime_factor)
    {
        if (u != 0)
            cout << u << " ";
    }
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    hey_output();
    sieve();
    ll tt = 1;
    // cin >> tt;
    while (tt--)
    {
        go_on();
    }

    return 0;
}
